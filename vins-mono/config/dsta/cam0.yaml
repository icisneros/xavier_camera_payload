%YAML:1.0

#common parameters
imu_topic: "/imu/data"
image_topic: "nv_image0"
output_path: "/home/airlab/Desktop/"

#camera calibration 
# model_type: PINHOLE
# camera_name: camera
# image_width: 1280
# image_height: 960
# distortion_parameters:
#    k1: 0.01792688839737692
#    k2: -0.02626085267295036
#    p1: 0.04389057152862129
#    p2: -0.018593900927459682
# projection_parameters:
#    fx: 600.0613594650991
#    fy: 534.9823717408061 
#    cx: 638.5195307362584
#    cy: 476.3091832554046

#camera calibration 
model_type: MEI
camera_name: camera
image_width: 1280
image_height: 960
mirror_parameters:
   xi: 1.7956654870875468
distortion_parameters:
   k1: -0.11595599776122589
   k2: 0.20399553776353424
   p1: 0.0012729210485259068
   p2: 0.0009433580864607075
projection_parameters:
   gamma1: 857.6507627274589
   gamma2: 770.3688994302365
   u0: 633.6141468761655
   v0: 480.52066925597626



# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ -9.9982111656745198e-01, -1.7946668177035833e-02,
#        5.9709268256260680e-03, -1.8090195030457838e-02,
#        9.9952572784956151e-01, -2.4921159896047030e-02,
#        -5.5208431940791591e-03, -2.5024717144209913e-02,
#        -9.9967158798391309e-01 ]
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [ 1.4456592170454310e-01, -7.3902846211435225e-02,
#        -3.4436307528683568e-02 ]

extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 1.8776001095981099e-02, -9.9968884410690739e-01,
       1.6421837626753689e-02, 9.9978736514214384e-01,
       1.8632729959310201e-02, -8.8343577238641103e-03,
       8.5256251954616974e-03, 1.6584219681949747e-02,
       9.9982612356977718e-01 ]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 9.1878697926396677e-02, -1.3810170495024174e-01,
       2.8551070798370045e-02 ]



#feature traker paprameters
max_cnt: 100            # max feature number in feature tracking
min_dist: 10            # min distance between two features 
freq: 15                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 0           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.02  # max solver itration time (ms), to guarantee real time
max_num_iterations: 4   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.04         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 0                # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/shaozu/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                     # online estimate time offset between camera and imu
td: 0.025885                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
# td: -0.078                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
# td: 0.015187
#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
